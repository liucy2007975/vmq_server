%%-*- mode: erlang -*
%% ex: ft=erlang

%% @doc Allow anonymous users to connect, default is 'off'
{mapping, "allow_anonymous", "vmq_server.allow_anonymous", [
                                                               {default, off},
                                                               {datatype, flag}
                                                              ]}.

%% @doc Allow operation even when a VerneMQ cluster is inconsistent,
%% by removing consistency checks while registering new
%% clients or subscribing/unsubscribing from topics
{mapping, "trade_consistency", "vmq_server.trade_consistency", [
                                                               {default, off},
                                                               {datatype, flag}
                                                              ]}.

%% @doc Allows a client to logon multiple times using the same client id
%% (non-standard behaviour!).
{mapping, "allow_multiple_sessions", "vmq_server.allow_multiple_sessions", [
                                                               {default, off},
                                                               {datatype, flag}
                                                              ]}.

%% @doc If allow_multiple_sessions is enabled 'queue_deliver_mode' will specify
%% how the messages are delivered to multiple sessions. Default is 'fanout' which
%% specifies to deliver every message to all connected sessions. 'balance' specifies
%% that the messages will be randomly balanced to the connected sessions.
%% (non-standard behaviour!).
{mapping, "queue_deliver_mode", "vmq_server.queue_deliver_mode", [
                                                               {default, fanout},
                                                               {datatype, atom},
                                                               hidden
                                                              ]}.

{translation, "vmq_server.queue_deliver_mode",
 fun(Conf) ->
         case cuttlefish:conf_get("queue_deliver_mode", Conf) of
             fanout -> fanout;
             balance -> balance;
             _ -> cuttlefish:invalid("queue_deliver_mode must be either 'fanout' or 'balance'!")
         end
 end}.

%% @doc queue_type enables to change the default queue delivery behaviour from
%% 'fifo' to 'lifo'. In order to make this work the underlying message store
%% must deliver the messages in proper order.
{mapping, "queue_type", "vmq_server.queue_type", [
                                                  {default, fifo},
                                                  {datatype, atom},
                                                  hidden
                                                 ]}.

{translation, "vmq_server.queue_type", 
 fun(Conf) ->
         case cuttlefish:conf_get("queue_type", Conf) of
             fifo -> fifo;
             lifo -> lifo;
             _ -> cuttlefish:invalid("queue_type must be either 'fifo' or 'lifo'!")
         end
 end}.

%% @doc Due to the eventual consistent nature of the subscriber store it is 
%% possible that during queue migration messages still arive on the old cluster 
%% node. This parameter allows to compensate this by keeping the queue around 
%% for some time after it was migrated to the other cluster node.
{mapping, "max_drain_time", "vmq_server.max_drain_time", [
                                                          {default, 500},
                                                          {datatype, integer},
                                                          hidden
                                                         ]}.

%% @doc Specifies the number of messages that are delviered to the remote
%% node per drain step. A large value will provide a faster migration of a queue,
%% but increases the waste of bandwidth in case the migration fails.
{mapping, "max_msgs_per_drain_step", "vmq_server.max_msgs_per_drain_step", [
                                                                            {default, 100},
                                                                            {datatype, integer},
                                                                            hidden
                                                                           ]}.


%% @doc Allows to select a new default reg_view.
%% A view is a pre-defined way to route messages. Multiple views can be 
%% loaded and used, but one has to be selected as a default. The default routing is
%% vmq_reg_trie, i.e. routing via the built-in trie data structure. 
{mapping, "default_reg_view", "vmq_server.default_reg_view", [
                                                              {default, vmq_reg_trie},
                                                              {datatype, atom},
                                                              hidden
                                                             ]}.
%% @doc the views that are started during startup
{mapping, "reg_views", "vmq_server.reg_views", [
                                                {default, "[vmq_reg_trie]"},
                                                {datatype, string},
                                                hidden
                                               ]}. 

{translation, "vmq_server.reg_views",
 fun(Conf) ->
         S = cuttlefish:conf_get("reg_views", Conf),
         {ok, T, _} = erl_scan:string(S ++ "."),
         {ok, Term} = erl_parse:parse_term(T),
         Term
 end}.

%% @doc Set the time in seconds VerneMQ waits before a retry, in case a (QoS=1 or QoS=2) message 
%% delivery gets no answer.
{mapping, "retry_interval", "vmq_server.retry_interval", [
                                                             {default, 20},
                                                             {commented, 20},
                                                             {datatype, integer}
                                                            ]}.

%% @doc Set the maximum size for client IDs. MQTT v3.1 specifies a
%% limit of 23 characters
{mapping, "max_client_id_size", "vmq_server.max_client_id_size", [
                                                               {default, 23},
                                                               {commented, 23},
                                                               {datatype, integer}
                                                              ]}.

%% @doc This option allows persistent clients ( = clean session set to 
%% false) to be removed if they do not reconnect within 'persistent_client_expiration'. 
%% This is a non-standard option. As far as the MQTT specification is concerned, 
%% persistent clients persist forever.
%% The expiration period should be an integer followed by one of 'd', 'w', 'm', 'y' for 
%% day, week, month, and year.
{mapping, "persistent_client_expiration", "vmq_server.persistent_client_expiration", [
                                                                                      {default, "never"},
                                                                                      {commented, "1w"},
                                                                                      {datatype, string}
                                                                                     ]}.

{translation, "vmq_server.persistent_client_expiration", 
 fun(Conf) ->
         S = cuttlefish:conf_get("persistent_client_expiration", Conf),
         case S of
             "never" -> 0;
             _ ->
                 [Entity|T] = lists:reverse(S),
                 case {Entity, list_to_integer(lists:reverse(T))} of
                     {$h, D} -> D * 60 * 60;
                     {$d, D} -> D * 24 * 60 * 60;
                     {$w, D} -> D * 7 * 24 * 60 * 60;
                     {$m, D} -> D * 4 * 7 * 24 * 60 * 60;
                     {$y, D} -> D * 12 * 4 * 7 * 24 * 60 * 60;
                     _ -> cuttlefish:invalid(S ++ " must be an integer followed by one of 'h', 'd', 'w', 'm', 'y' for hour, day, week, month, and year, or the string 'never'")
                 end
         end
 end}.

%% @doc The maximum number of QoS 1 or 2 messages that can be in the process of being 
%% transmitted simultaneously. This includes messages currently going through handshakes 
%% and messages that are being retried. Defaults to 20. Set to 0 for no maximum. If set 
%% to 1, this will guarantee in-order delivery of messages.
{mapping, "max_inflight_messages", "vmq_server.max_inflight_messages", [
                                                                        {default, 20},
                                                                        {datatype, integer}
                                                                       ]}.

%% @doc The maximum number of messages to hold in the queue above 
%% those messages that are currently in flight. Defaults to 1000. This affects
%% messages of any QoS. Set to -1 for no maximum (not recommended). 
%% This option allows to control how a specific client session can deal
%% with message bursts. As a general rule of thumb set
%% this number a bit higher than the expected message rate a single consumer is 
%% required to process. Note that setting this value to 0 will totally block
%% delivery from any queue.
{mapping, "max_online_messages", "vmq_server.max_online_messages", [
                                                    {default, 1000},
                                                    {datatype, integer}
                                                 ]}.

%% @doc The maximum number of QoS 1 or 2 messages to hold in the offline queue.
%% Defaults to 1000. Set to -1 for no maximum (not recommended). Set to 0
%% if no messages should be stored offline.
{mapping, "max_offline_messages", "vmq_server.max_offline_messages", [
                                                    {default, 1000},
                                                    {datatype, integer}
                                                 ]}.

%% @doc specify in case multiple sessions are allowed how the queue should
%% deliver the messages. In case of 'fanout' all the attached sessions 
%% will receive the message, in case of 'balance' an attached session is 
%% choosen randomly.
{mapping, "queue_deliver_mode", "vmq_server.queue_deliver_mode", [{default, fanout},
                                                                  {datatype, atom},
                                                                  hidden]}.

%% @doc specify how the queue should process the messages, 
%% either the 'fifo' or 'lifo' way.
{mapping, "queue_type", "vmq_server.queue_type", [{default, fifo},
                                                  {datatype, atom},
                                                  hidden]}.

%% @doc specifies the maximum incoming publish rate per session. Depending
%% on the underlying network buffers this rate isn't enforced.
%% defaults to 0, which means no rate limits apply
{mapping, "max_message_rate", "vmq_server.max_message_rate", [
                                                              {default, 0},
                                                              {datatype, integer},
                                                              hidden
                                                             ]}.

%% @doc This option sets the maximum payload size that VerneMQ will allow for publishers. 
%% Messages that exceed this size will not be accepted by VerneMQ. The 
%% default value is 0, which means that all valid MQTT messages are accepted. MQTT 
%% imposes a maximum payload size of 268435455 bytes.
{mapping, "message_size_limit", "vmq_server.message_size_limit", [
                                                                    {default, 0},
                                                                    {datatype, integer}
                                                                 ]}.

%% @doc If a message is published with a QoS lower than the QoS of the subscription it is
%% delivered to, VerneMQ can upgrade the outgoing QoS. This is a non-standard option.
{mapping, "upgrade_outgoing_qos", "vmq_server.upgrade_outgoing_qos", [
                                                                      {default, off},
                                                                      {datatype, flag}
                                                                     ]}.

%% @doc specifies how many size in bytes are buffered in case the remote node 
%% is not available.
{mapping, "outgoing_clustering_buffer_size", "vmq_server.outgoing_clustering_buffer_size", [
                                                                                            {default, 10000},
                                                                                            {datatype, integer},
                                                                                            hidden
                                                                                           ]}.

%% @doc listener.max_connections is an integer or 'infinity' defining 
%% the maximum number of concurrent connections. This option can be overridden
%% on the protocol level by:
%%
%%     - listener.tcp.max_connections
%%     - listener.ssl.max_connections
%%     - listener.ws.max_connections 
%%     - listener.wss.max_connections 
%%
%% or on the listener level by:
%%
%%     - listener.tcp.my_tcp_listener.max_connections
%%     - listener.ssl.my_ssl_listener.max_connections
%%     - listener.ws.my_ws_listener.max_connections
%%     - listener.wss.my_wss_listener.max_connections
{mapping, "listener.max_connections", "vmq_server.listeners", [
                                                                  {default, {{max_connections}} },
                                                                  {datatype, [integer, {atom, infinity}]}
                                                                 ]}. 

{mapping, "listener.tcp.max_connections", "vmq_server.listeners", [
                                                                      {default, -1},
                                                                      {datatype, [integer, {atom, infinity}]},
                                                                      hidden
                                                                     ]}. 

{mapping, "listener.tcp.$name.max_connections", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, [integer, {atom, infinity}]},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.ssl.max_connections", "vmq_server.listeners", [
                                                                      {default, -1},
                                                                      {datatype, [integer, {atom, infinity}]},
                                                                      hidden
                                                                     ]}. 

{mapping, "listener.ssl.$name.max_connections", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, [integer, {atom, infinity}]},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.ws.max_connections", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, [integer, {atom, infinity}]},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.ws.$name.max_connections", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, [integer, {atom, infinity}]},
                                                                                  hidden
                                                                                 ]}. 
{mapping, "listener.wss.max_connections", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, [integer, {atom, infinity}]},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.wss.$name.max_connections", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, [integer, {atom, infinity}]},
                                                                                  hidden
                                                                                 ]}. 
{mapping, "listener.vmq.max_connections", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, [integer, {atom, infinity}]},
                                                                            hidden
                                                                           ]}. 
{mapping, "listener.vmq.$name.max_connections", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, [integer, {atom, infinity}]},
                                                                                  hidden
                                                                                 ]}. 
{mapping, "listener.vmqs.max_connections", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, [integer, {atom, infinity}]},
                                                                            hidden
                                                                           ]}. 
{mapping, "listener.vmqs.$name.max_connections", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, [integer, {atom, infinity}]},
                                                                                  hidden
                                                                                 ]}. 


%% @doc Set the nr of acceptors waiting to concurrently accept new connections.
%% This can be specified either on the protocol level:
%%
%%     - listener.tcp.nr_of_acceptors
%%     - listener.ssl.nr_of_acceptors
%%     - listener.ws.nr_of_acceptors 
%%     - listener.wss.nr_of_acceptors 
%%
%% or on the listener level:
%%
%%     - listener.tcp.my_tcp_listener.nr_of_acceptors
%%     - listener.ssl.my_ssl_listener.nr_of_acceptors
%%     - listener.ws.my_ws_listener.nr_of_acceptors
%%     - listener.wss.my_wss_listener.nr_of_acceptors
{mapping, "listener.nr_of_acceptors", "vmq_server.listeners", [
                                                                  {default, {{ max_nr_of_acceptors}} },
                                                                  {datatype, integer}
                                                                 ]}.

{mapping, "listener.tcp.nr_of_acceptors", "vmq_server.listeners", [
                                                                      {default, -1},
                                                                      {datatype, integer},
                                                                      hidden
                                                                     ]}. 

{mapping, "listener.tcp.$name.nr_of_acceptors", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, integer},
                                                                            {include_default, "default"},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.ssl.nr_of_acceptors", "vmq_server.listeners", [
                                                                      {default, -1},
                                                                      {datatype, integer},
                                                                      hidden
                                                                     ]}. 

{mapping, "listener.ssl.$name.nr_of_acceptors", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, integer},
                                                                            {include_default, "default"},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.ws.nr_of_acceptors", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, integer},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.ws.$name.nr_of_acceptors", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, integer},
                                                                                  {include_default, "default"},
                                                                                  hidden
                                                                                 ]}. 
{mapping, "listener.wss.nr_of_acceptors", "vmq_server.listeners", [
                                                                            {default, -1},
                                                                            {datatype, integer},
                                                                            hidden
                                                                           ]}. 

{mapping, "listener.wss.$name.nr_of_acceptors", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, integer},
                                                                                  {include_default, "default"},
                                                                                  hidden
                                                                                 ]}.
{mapping, "listener.vmq.nr_of_acceptors", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, integer},
                                                                                  hidden
                                                                                 ]}.
{mapping, "listener.vmq.$name.nr_of_acceptors", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, integer},
                                                                                  {include_default, "default"},
                                                                                  hidden
                                                                                 ]}.
{mapping, "listener.vmqs.nr_of_acceptors", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, integer},
                                                                                  hidden
                                                                                 ]}.
{mapping, "listener.vmqs.$name.nr_of_acceptors", "vmq_server.listeners", [
                                                                                  {default, -1},
                                                                                  {datatype, integer},
                                                                                  {include_default, "default"},
                                                                                  hidden
                                                                                 ]}.

%% @doc listener.tcp.<name> is an IP address and TCP port that 
%% the broker will bind to. You can define multiple listeners e.g:
%% - listener.tcp.default = 127.0.0.1:1883
%% - listener.tcp.internal = 127.0.0.1:10883
%% - listener.tcp.my_other_listener = 127.0.0.1:10884
%% This also works for SSL listeners and WebSocket handlers:
%% - listener.ssl.default = 127.0.0.1:8883
%% - listener.ws.default = 127.0.0.1:800 
%% - listener.wss.default = 127.0.0.1:880 
{mapping, "listener.tcp.$name", "vmq_server.listeners", [
                                                            {default, { "{{mqtt_default_ip}}", {{mqtt_default_port}} }},
                                                            {datatype, ip},
                                                            {include_default, "default"}
                                                           ]}.

{mapping, "listener.ws.$name", "vmq_server.listeners", [
                                                                  {default, { "{{mqtt_default_ws_ip}}", {{mqtt_default_ws_port}} }},
                                                                  {datatype, ip},
                                                                  hidden
                                                                 ]}.

{mapping, "listener.wss.$name", "vmq_server.listeners", [
                                                                  {default, { "{{mqtt_default_ws_ip}}", {{mqtt_default_ws_port}} }},
                                                                  {datatype, ip},
                                                                  hidden
                                                                 ]}.

{mapping, "listener.ssl.$name", "vmq_server.listeners", [
                                                            {default, { "{{mqtt_default_ip}}", {{mqtt_default_port}} }},
                                                            {datatype, ip},
                                                            hidden
                                                           ]}.

%% @doc listener.vmq.clustering is the IP address and TCP port that
%% the broker will bind to accept connections from other cluster
%% nodes e.g:
%% - listener.vmq.clustering = 0.0.0.0:18883
%% This also works for SSL listeners:
%% - listener.vmqs.clustering = 0.0.0.0:18884
{mapping, "listener.vmq.$name", "vmq_server.listeners", [
                                                           {default, { "{{cluster_default_ip}}", {{cluster_default_port}} }},
                                                           {datatype, ip},
                                                            {include_default, "clustering"}
                                                          ]}.
{mapping, "listener.vmqs.$name", "vmq_server.listeners", [
                                                           {default, { "{{cluster_default_ip}}", {{cluster_default_port}} }},
                                                           {datatype, ip},
                                                           hidden
                                                          ]}.


%% @doc Set the mountpoint on the protocol level or on the listener level
%%
%%     - listener.tcp.mountpoint
%%     - listener.ssl.mountpoint
%%     - listener.ws.mountpoint 
%%     - listener.wss.mountpoint 
%%
%% listener level:
%%
%%     - listener.tcp.my_tcp_listener.mountpoint
%%     - listener.ssl.my_ssl_listener.mountpoint
%%     - listener.ws.my_ws_listener.mountpoint
%%     - listener.wss.my_wss_listener.mountpoint
{mapping, "listener.mountpoint", "vmq_server.listeners", [{default, "off"},
                                                             {datatype, string}
                                                            ]}. 
{mapping, "listener.tcp.mountpoint", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 

{mapping, "listener.tcp.$name.mountpoint", "vmq_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                      ]}. 

{mapping, "listener.ws.mountpoint", "vmq_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                      ]}. 

{mapping, "listener.ws.$name.mountpoint", "vmq_server.listeners", [
                                                                             {default, ""},
                                                                             {datatype, string},
                                                                             hidden
                                                                            ]}. 
{mapping, "listener.wss.mountpoint", "vmq_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                      ]}. 

{mapping, "listener.wss.$name.mountpoint", "vmq_server.listeners", [
                                                                             {default, ""},
                                                                             {datatype, string},
                                                                             hidden
                                                                            ]}. 

{mapping, "listener.wss.mountpoint", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 

{mapping, "listener.wss.$name.mountpoint", "vmq_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                      ]}. 


{mapping, "listener.ssl.mountpoint", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 

{mapping, "listener.ssl.$name.mountpoint", "vmq_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                ]}. 
{mapping, "listener.vmq.mountpoint", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 

{mapping, "listener.vmq.$name.mountpoint", "vmq_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                      ]}. 
{mapping, "listener.vmqs.mountpoint", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 

{mapping, "listener.vmqs.$name.mountpoint", "vmq_server.listeners", [
                                                                       {default, ""},
                                                                       {datatype, string},
                                                                       hidden
                                                                      ]}. 
%% @doc The cafile is used to define the path to a file containing 
%% the PEM encoded CA certificates that are trusted. Set the cafile 
%% on the protocol level or on the listener level:
%%
%%     - listener.ssl.cafile
%%     - listener.wss.cafile
%%
%% or on the listener level:
%%
%%     - listener.ssl.my_ssl_listener.cafile
%%     - listener.wss.my_wss_listener.cafile
{mapping, "listener.ssl.cafile", "vmq_server.listeners", [
                                                          {default, ""},
                                                          {datatype, file},
                                                          {commented, "{{platform_etc_dir}}/cacerts.pem"}
                                                         ]}. 

{mapping, "listener.ssl.$name.cafile", "vmq_server.listeners", [
                                                                {default, ""},
                                                                {datatype, string},
                                                                hidden
                                                               ]}. 
{mapping, "listener.wss.cafile", "vmq_server.listeners", [
                                                          {default, ""},
                                                          {datatype, file},
                                                          hidden
                                                         ]}. 
{mapping, "listener.wss.$name.cafile", "vmq_server.listeners", [
                                                                {default, ""},
                                                                {datatype, string},
                                                                hidden
                                                               ]}. 
{mapping, "listener.vmqs.$name.cafile", "vmq_server.listeners", [
                                                                {default, ""},
                                                                {datatype, string},
                                                                hidden
                                                               ]}. 

%% @doc Set the path to the PEM encoded server certificate
%% on the protocol level or on the listener level:
%%
%%     - listener.ssl.certfile
%%     - listener.wss.certfile
%%
%% or on the listener level:
%%
%%     - listener.ssl.my_ssl_listener.certfile
%%     - listener.wss.my_wss_listener.certfile
{mapping, "listener.ssl.certfile", "vmq_server.listeners", [
                                                            {default, ""},
                                                            {datatype, file},
                                                            {commented, "{{platform_etc_dir}}/cert.pem"}
                                                           ]}. 
{mapping, "listener.ssl.$name.certfile", "vmq_server.listeners", [
                                                                  {default, ""},
                                                                  {datatype, file},
                                                                  hidden
                                                                 ]}. 
{mapping, "listener.wss.certfile", "vmq_server.listeners", [
                                                            {default, ""},
                                                            {datatype, file},
                                                            hidden
                                                           ]}. 
{mapping, "listener.wss.$name.certfile", "vmq_server.listeners", [
                                                                  {default, ""},
                                                                  {datatype, file},
                                                                  hidden
                                                                 ]}. 
{mapping, "listener.vmqs.$name.certfile", "vmq_server.listeners", [
                                                                  {default, ""},
                                                                  {datatype, file},
                                                                  hidden
                                                                 ]}. 
%% @doc Set the path to the PEM encoded key file on the protocol 
%% level or on the listener level:
%%
%%     - listener.ssl.keyfile
%%     - listener.wss.keyfile
%%
%% or on the listener level:
%%
%%     - listener.ssl.my_ssl_listener.keyfile
%%     - listener.wss.my_wss_listener.keyfile
{mapping, "listener.ssl.keyfile", "vmq_server.listeners", [
                                                           {default, ""},
                                                           {datatype, file},
                                                           {commented, "{{platform_etc_dir}}/key.pem"}
                                                          ]}. 
{mapping, "listener.ssl.$name.keyfile", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, file},
                                                                 hidden
                                                                ]}. 
{mapping, "listener.wss.keyfile", "vmq_server.listeners", [
                                                           {default, ""},
                                                           {datatype, file},
                                                           hidden
                                                          ]}. 
{mapping, "listener.wss.$name.keyfile", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, file},
                                                                 hidden
                                                                ]}. 
{mapping, "listener.vmqs.$name.keyfile", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, file},
                                                                 hidden
                                                                ]}. 
%% @doc Set the list of allowed ciphers (each separated with a colon),
%% on the protocol level or on the listener level. Reasonable defaults
%% are used if nothing is specified:
%%
%%     - listener.ssl.ciphers
%%     - listener.wss.ciphers
%%
%% or on the listener level:
%%
%%     - listener.ssl.my_ssl_listener.ciphers
%%     - listener.wss.my_wss_listener.ciphers
{mapping, "listener.ssl.ciphers", "vmq_server.listeners", [
                                                              {default, ""},
                                                              {datatype, string},
                                                              {commented, ""}
                                                             ]}. 
{mapping, "listener.ssl.$name.ciphers", "vmq_server.listeners", [
                                                              {default, ""},
                                                                    {datatype, string},
                                                                    hidden
                                                                   ]}. 
{mapping, "listener.wss.ciphers", "vmq_server.listeners", [
                                                           {default, ""},
                                                           {datatype, string},
                                                           hidden
                                                          ]}. 
{mapping, "listener.wss.$name.ciphers", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 
{mapping, "listener.vmqs.$name.ciphers", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 
%% @doc If you have 'listener.ssl.require_certificate' set to true, 
%% you can create a certificate revocation list file to revoke access 
%% to particular client certificates. If you have done this, use crlfile 
%% to point to the PEM encoded revocation file. This can be done on the 
%% protocol level or on the listener level. 
%%
%%     - listener.ssl.crlfile
%%     - listener.wss.crlfile
%%
%% or on the listener level:
%%
%%     - listener.ssl.my_ssl_listener.crlfile
%%     - listener.wss.my_wss_listener.crlfile
{mapping, "listener.ssl.crlfile", "vmq_server.listeners", [
                                                           {default, ""},
                                                           {datatype, string},
                                                           {commented, ""}
                                                          ]}. 
{mapping, "listener.ssl.$name.crlfile", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 
{mapping, "listener.wss.crlfile", "vmq_server.listeners", [
                                                           {default, ""},
                                                           {datatype, string},
                                                           hidden
                                                          ]}. 
{mapping, "listener.wss.$name.crlfile", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 
{mapping, "listener.vmqs.$name.crlfile", "vmq_server.listeners", [
                                                                 {default, ""},
                                                                 {datatype, string},
                                                                 hidden
                                                                ]}. 
%% @doc Enable this option if you want to use SSL client certificates 
%% to authenticate your clients. This can be done on the protocol level
%% or on the listener level.
%%
%%     - listener.ssl.require_certificate
%%     - listener.wss.require_certificate
%%
%% or on the listener level:
%%
%%     - listener.ssl.my_ssl_listener.require_certificate
%%     - listener.wss.my_wss_listener.require_certificate
{mapping, "listener.ssl.require_certificate", "vmq_server.listeners", [
                                                                       {default, off},
                                                                       {datatype, flag},
                                                                       {commented, off}
                                                                      ]}. 
{mapping, "listener.ssl.$name.require_certificate", "vmq_server.listeners", [
                                                                             {datatype, flag},
                                                                             hidden
                                                                            ]}. 
{mapping, "listener.wss.require_certificate", "vmq_server.listeners", [
                                                                       {default, off},
                                                                       {datatype, flag},
                                                                       hidden
                                                                      ]}. 
{mapping, "listener.wss.$name.require_certificate", "vmq_server.listeners", [
                                                                             {datatype, flag},
                                                                             hidden
                                                                            ]}. 
{mapping, "listener.vmqs.$name.require_certificate", "vmq_server.listeners", [
                                                                             {datatype, flag},
                                                                             hidden
                                                                            ]}. 
%% @doc Configure the TLS protocol version (tlsv1, tlsv1.1, or tlsv1.2) to be 
%% used for either all configured SSL listeners or for a specific listener:
%%
%%     - listener.ssl.tls_version
%%     - listener.wss.tls_version
%%
%% or on the listener level:
%%
%%     - listener.ssl.my_ssl_listener.tls_version
%%     - listener.wss.my_wss_listener.tls_version
{mapping, "listener.ssl.tls_version", "vmq_server.listeners", [
                                                               {default, 'tlsv1.2'},
                                                               {datatype, atom},
                                                               {commented, 'tlsv1.2'}
                                                              ]}. 
{mapping, "listener.ssl.$name.tls_version", "vmq_server.listeners", [
                                                                     {datatype, atom},
                                                                     hidden
                                                                    ]}. 
{mapping, "listener.wss.tls_version", "vmq_server.listeners", [
                                                               {default, 'tlsv1.2'},
                                                               {datatype, atom},
                                                               hidden
                                                              ]}. 
{mapping, "listener.wss.$name.tls_version", "vmq_server.listeners", [
                                                                     {datatype, atom},
                                                                     hidden
                                                                    ]}. 
{mapping, "listener.vmqs.$name.tls_version", "vmq_server.listeners", [
                                                                     {datatype, atom},
                                                                     hidden
                                                                    ]}. 
%% @doc If 'listener.ssl.require_certificate' is enabled, you may enable 
%% 'listener.ssl.use_identity_as_username' to use the CN value from the client 
%% certificate as a username. If enabled other authentication plugins are not
%% considered. The option can be specified either for all SSL listeners or for
%% a specific listener:
%%
%%     - listener.ssl.use_identity_as_username
%%     - listener.wss.use_identity_as_username
%%
%% or on the listener level:
%%
%%     - listener.ssl.my_ssl_listener.use_identity_as_username
%%     - listener.wss.my_wss_listener.use_identity_as_username
{mapping, "listener.ssl.use_identity_as_username", "vmq_server.listeners", [
                                                                            {default, off},
                                                                            {datatype, flag},
                                                                            {commented, off}
                                                                           ]}. 
{mapping, "listener.ssl.$name.use_identity_as_username", "vmq_server.listeners", [
                                                                                  {datatype, flag},
                                                                                  hidden
                                                                                 ]}. 
{mapping, "listener.wss.use_identity_as_username", "vmq_server.listeners", [
                                                                            {default, off},
                                                                            {datatype, flag},
                                                                            hidden
                                                                           ]}. 
{mapping, "listener.wss.$name.use_identity_as_username", "vmq_server.listeners", [
                                                                                  {datatype, flag},
                                                                                  hidden
                                                                                 ]}. 
{mapping, "listener.ssl.support_elliptic_curves", "vmq_server.listeners", [
                                                                           {default, on},
                                                                           {datatype, flag},
                                                                           hidden
                                                                          ]}. 
{mapping, "listener.ssl.$name.support_elliptic_curves", "vmq_server.listeners", [
                                                                                 {datatype, flag},
                                                                                 hidden
                                                                                ]}. 
{mapping, "listener.wss.support_elliptic_curves", "vmq_server.listeners", [
                                                                           {default, on},
                                                                           {datatype, flag},
                                                                           hidden
                                                                          ]}. 
{mapping, "listener.wss.$name.support_elliptic_curves", "vmq_server.listeners", [
                                                                                 {datatype, flag},
                                                                                 hidden
                                                                                ]}. 
{mapping, "listener.vmqs.$name.support_elliptic_curves", "vmq_server.listeners", [
                                                                                 {datatype, flag},
                                                                                 hidden
                                                                                ]}. 


{translation, "vmq_server.listeners", 
 fun(Conf) ->
         %% cuttlefish messes up with the tree-like configuration style if
         %% it cannot find either configured values or defaults in the 
         %% more specific leafs of the tree. That's why we always provide
         %% a default value and take care of them by ourselfs.
         InfIntVal = fun(Name, Val1, Def) -> 
                             case Val1 of
                                 infinity -> infinity;
                                 undefined -> Def;
                                 -1 -> Def;
                                 Int when is_integer(Int) -> Int;
                                 _ -> cuttlefish:invalid(Name ++ "  should be an integer")
                             end
                     end,
         MPVal = fun(Name, Val2, Def) -> case Val2 of
                                             "off" -> "";
                                             "" -> Def;
                                             S when is_list(S) -> S;
                                             _ -> cuttlefish:invalid(Name ++ "should be a string")
                                         end
                 end,

         StrVal = fun(_, "", Def) -> Def;
                     (_, S, _) when is_list(S) -> S;
                     (_, undefined, Def) -> Def end,
         BoolVal = fun(_, B, _) when is_boolean(B) -> B;
                      (_, undefined, Def) -> Def end,
         AtomVal = fun(_, A, _) when is_atom(A) -> A end,


         Mappings = ["max_connections", "nr_of_acceptors", "mountpoint"],
                    %% SSL specific
         SSLMapps = ["cafile", "capath", "certfile", "ciphers", "crlfile",
                     "keyfile", "require_certificate", "tls_version",
                     "use_identity_as_username", "support_elliptic_curves"],
         F = fun(Prefix, Suffix, Val) ->
                     %% get default from root of the tree
                     Default1 =
                     case lists:member(Suffix, SSLMapps) of
                         true -> 
                             undefined;
                         false ->
                            cuttlefish:conf_get(lists:flatten(["listener.", Suffix]), Conf)
                     end,
                     Default2 = cuttlefish:conf_get(lists:flatten([Prefix, ".", Suffix]), Conf, Default1),
                     %% get the name value pairs
                     Prefix3 = lists:flatten([Prefix, ".$name"]),
                     [begin
                          {ok, Addr} = inet:parse_address(StrAddr),
                          Prefix4 = lists:flatten([Prefix, ".", Name, ".", Suffix]),
                          V = Val(Name, cuttlefish:conf_get(Prefix4, Conf, Default2), 
                                  Val(Name, Default2, 
                                      Val(Name, Default1, undefined))),
                          AddrPort = {Addr, Port},
                          {AddrPort, {list_to_atom(Suffix), V}}
                      end 
                      || {[_, _, Name], {StrAddr, Port}} <- lists:filter(
                                                            fun({K, _V}) ->
                                                                    cuttlefish_variable:is_fuzzy_match(K, string:tokens(Prefix3, "."))
                                                            end, Conf), not lists:member(Name, Mappings ++ SSLMapps)]
             end,

         MZip = fun([H|_] = ListOfLists) ->
                        Size = length(H), %% get default size
                        ListOfLists = [L || L <- ListOfLists, length(L) == Size],
                        [
                           lists:reverse(
                             lists:foldl(
                               fun(L, Acc) ->
                                       [lists:nth(I, L)|Acc]
                               end, [], ListOfLists))
                         || I <- lists:seq(1, Size)]
                end,

         {TCPIPs, TCPMaxConns} = lists:unzip(F("listener.tcp", "max_connections", InfIntVal)),
         {SSLIPs, SSLMaxConns} = lists:unzip(F("listener.ssl", "max_connections", InfIntVal)),
         {WSIPs, WSMaxConns} = lists:unzip(F("listener.ws", "max_connections", InfIntVal)),
         {WS_SSLIPs, WS_SSLMaxConns} = lists:unzip(F("listener.wss", "max_connections", InfIntVal)),
         {VMQIPs, VMQMaxConns} = lists:unzip(F("listener.vmq", "max_connections", InfIntVal)),
         {VMQ_SSLIPs, VMQ_SSLMaxConns} = lists:unzip(F("listener.vmqs", "max_connections", InfIntVal)),

         {TCPIPs, TCPNrOfAcceptors} = lists:unzip(F("listener.tcp", "nr_of_acceptors", InfIntVal)),
         {SSLIPs, SSLNrOfAcceptors} = lists:unzip(F("listener.ssl", "nr_of_acceptors", InfIntVal)),
         {WSIPs, WSNrOfAcceptors} = lists:unzip(F("listener.ws", "nr_of_acceptors", InfIntVal)),
         {WS_SSLIPs, WS_SSLNrOfAcceptors} = lists:unzip(F("listener.wss", "nr_of_acceptors", InfIntVal)),
         {VMQIPs, VMQNrOfAcceptors} = lists:unzip(F("listener.vmq", "nr_of_acceptors", InfIntVal)),
         {VMQ_SSLIPs, VMQ_SSLNrOfAcceptors} = lists:unzip(F("listener.vmqs", "nr_of_acceptors", InfIntVal)),
         
         {TCPIPs, TCPMountPoint} = lists:unzip(F("listener.tcp", "mountpoint", MPVal)),
         {SSLIPs, SSLMountPoint} = lists:unzip(F("listener.ssl", "mountpoint", MPVal)),
         {WSIPs, WSMountPoint} = lists:unzip(F("listener.ws", "mountpoint", MPVal)),
         {WS_SSLIPs, WS_SSLMountPoint} = lists:unzip(F("listener.wss", "mountpoint", MPVal)),
         {VMQIPs, VMQMountPoint} = lists:unzip(F("listener.vmq", "mountpoint", MPVal)),
         {VMQ_SSLIPs, VMQ_SSLMountPoint} = lists:unzip(F("listener.vmqs", "mountpoint", MPVal)),

         % SSL
         {SSLIPs, SSLCAFiles} = lists:unzip(F("listener.ssl", "cafile", StrVal)),
         {SSLIPs, SSLCAPaths} = lists:unzip(F("listener.ssl", "capath", StrVal)),
         {SSLIPs, SSLCertFiles} = lists:unzip(F("listener.ssl", "certfile", StrVal)),
         {SSLIPs, SSLCiphers} = lists:unzip(F("listener.ssl", "ciphers", StrVal)),
         {SSLIPs, SSLCrlFiles} = lists:unzip(F("listener.ssl", "crlfile", StrVal)),
         {SSLIPs, SSLKeyFiles} = lists:unzip(F("listener.ssl", "keyfile", StrVal)),
         {SSLIPs, SSLRequireCerts} = lists:unzip(F("listener.ssl", "require_certificate", BoolVal)),
         {SSLIPs, SSLVersions} = lists:unzip(F("listener.ssl", "tls_version", AtomVal)),
         {SSLIPs, SSLUseIdents} = lists:unzip(F("listener.ssl", "use_identity_as_username", BoolVal)),
         {SSLIPs, SSLECSupport} = lists:unzip(F("listener.ssl", "support_elliptic_curves", BoolVal)),

         % WSS
         {WS_SSLIPs, WS_SSLCAFiles} = lists:unzip(F("listener.wss", "cafile", StrVal)),
         {WS_SSLIPs, WS_SSLCAPaths} = lists:unzip(F("listener.wss", "capath", StrVal)),
         {WS_SSLIPs, WS_SSLCertFiles} = lists:unzip(F("listener.wss", "certfile", StrVal)),
         {WS_SSLIPs, WS_SSLCiphers} = lists:unzip(F("listener.wss", "ciphers", StrVal)),
         {WS_SSLIPs, WS_SSLCrlFiles} = lists:unzip(F("listener.wss", "crlfile", StrVal)),
         {WS_SSLIPs, WS_SSLKeyFiles} = lists:unzip(F("listener.wss", "keyfile", StrVal)),
         {WS_SSLIPs, WS_SSLRequireCerts} = lists:unzip(F("listener.wss", "require_certificate", BoolVal)),
         {WS_SSLIPs, WS_SSLVersions} = lists:unzip(F("listener.wss", "tls_version", AtomVal)),
         {WS_SSLIPs, WS_SSLUseIdents} = lists:unzip(F("listener.wss", "use_identity_as_username", BoolVal)),
         {WS_SSLIPs, WS_SSLECSupport} = lists:unzip(F("listener.wss", "support_elliptic_curves", BoolVal)),

         % VMQS
         {VMQ_SSLIPs, VMQ_SSLCAFiles} = lists:unzip(F("listener.vmqs", "cafile", StrVal)),
         {VMQ_SSLIPs, VMQ_SSLCAPaths} = lists:unzip(F("listener.vmqs", "capath", StrVal)),
         {VMQ_SSLIPs, VMQ_SSLCertFiles} = lists:unzip(F("listener.vmqs", "certfile", StrVal)),
         {VMQ_SSLIPs, VMQ_SSLCiphers} = lists:unzip(F("listener.vmqs", "ciphers", StrVal)),
         {VMQ_SSLIPs, VMQ_SSLCrlFiles} = lists:unzip(F("listener.vmqs", "crlfile", StrVal)),
         {VMQ_SSLIPs, VMQ_SSLKeyFiles} = lists:unzip(F("listener.vmqs", "keyfile", StrVal)),
         {VMQ_SSLIPs, VMQ_SSLRequireCerts} = lists:unzip(F("listener.vmqs", "require_certificate", BoolVal)),
         {VMQ_SSLIPs, VMQ_SSLVersions} = lists:unzip(F("listener.vmqs", "tls_version", AtomVal)),
         {VMQ_SSLIPs, VMQ_SSLUseIdents} = lists:unzip(F("listener.vmqs", "use_identity_as_username", BoolVal)),
         {VMQ_SSLIPs, VMQ_SSLECSupport} = lists:unzip(F("listener.vmqs", "support_elliptic_curves", BoolVal)),

         TCP = lists:zip(TCPIPs, MZip([TCPMaxConns, 
                                       TCPNrOfAcceptors,
                                       TCPMountPoint])),
         WS = lists:zip(WSIPs, MZip([WSMaxConns, 
                                     WSNrOfAcceptors,
                                     WSMountPoint])),
         VMQ = lists:zip(VMQIPs, MZip([VMQMaxConns, 
                                     VMQNrOfAcceptors,
                                     VMQMountPoint])),
         SSL = lists:zip(SSLIPs, MZip([SSLMaxConns, 
                                       SSLNrOfAcceptors,
                                       SSLMountPoint,
                                       SSLCAFiles, 
                                       SSLCAPaths, 
                                       SSLCertFiles, 
                                       SSLCiphers, 
                                       SSLCrlFiles, 
                                       SSLKeyFiles, 
                                       SSLRequireCerts, 
                                       SSLVersions, 
                                       SSLUseIdents, 
                                       SSLECSupport])),
         WSS = lists:zip(WS_SSLIPs, MZip([WS_SSLMaxConns, 
                                          WS_SSLNrOfAcceptors,
                                          WS_SSLMountPoint,
                                          WS_SSLCAFiles, 
                                          WS_SSLCAPaths, 
                                          WS_SSLCertFiles, 
                                          WS_SSLCiphers, 
                                          WS_SSLCrlFiles, 
                                          WS_SSLKeyFiles, 
                                          WS_SSLRequireCerts, 
                                          WS_SSLVersions, 
                                          WS_SSLUseIdents, 
                                          WS_SSLECSupport])),
         VMQS = lists:zip(VMQ_SSLIPs, MZip([VMQ_SSLMaxConns, 
                                          VMQ_SSLNrOfAcceptors,
                                          VMQ_SSLMountPoint,
                                          VMQ_SSLCAFiles, 
                                          VMQ_SSLCAPaths, 
                                          VMQ_SSLCertFiles, 
                                          VMQ_SSLCiphers, 
                                          VMQ_SSLCrlFiles, 
                                          VMQ_SSLKeyFiles, 
                                          VMQ_SSLRequireCerts, 
                                          VMQ_SSLVersions, 
                                          VMQ_SSLUseIdents, 
                                          VMQ_SSLECSupport])),
         DropUndef = fun(L) ->
                             [{K, [I || {_, V} = I  <- SubL, V /= undefined]} || {K, SubL} <- L]
                     end,
         [{mqtt, DropUndef(TCP)}, 
          {mqtts, DropUndef(SSL)}, 
          {mqttws, DropUndef(WS)}, 
          {mqttwss, DropUndef(WSS)},
          {vmq, DropUndef(VMQ)},
          {vmqs, DropUndef(VMQS)}]
 end
}.

{mapping, "tcp_listen_options", "vmq_server.tcp_listen_options", [
                                                                  {default, "[{nodelay, true}, {linger, {true, 0}}, {send_timeout, 30000}, {send_timeout_close, true}]"},
                                                                  {datatype, string},
                                                                  hidden
                                                                 ]}.

{mapping, "leveldb_message_store.directory", "vmq_server.msg_store_opts.store_dir", [
                                                                            {default, "{{platform_data_dir}}/msgstore"},
                                                                            {datatype, directory},
                                                                            hidden
                                                                           ]}.

{mapping, "plumtree.directory", "plumtree.plumtree_data_dir", [
                                             {default, "{{platform_data_dir}}/meta"},
                                             {datatype, directory},
                                             hidden
                                            ]}.

%% the setup utility will call hooks to create the default directories,
%% however the setup defaults e.g. data.<nodename> are not matching with our 
%% defaults, so we need to override them.
{mapping, "setup.log_dir", "setup.log_dir", [
                                             {default, "{{platform_log_dir}}/"},
                                             {datatype, directory},
                                             hidden
                                            ]}.
{mapping, "setup.data_dir", "setup.data_dir", [
                                             {default, "{{platform_data_dir}}/"},
                                             {datatype, directory},
                                             hidden
                                            ]}.

{translation, "vmq_server.tcp_listen_options", 
 fun(Conf) ->
         S = cuttlefish:conf_get("tcp_listen_options", Conf),
         {ok, T, _} = erl_scan:string(S ++ "."),
         {ok, Term} = erl_parse:parse_term(T),
         Term
 end}.
